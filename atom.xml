<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>willkernel</title>
  
  <subtitle>Lifelong learning</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://willkernel.github.io/"/>
  <updated>2018-03-24T05:48:07.975Z</updated>
  <id>http://willkernel.github.io/</id>
  
  <author>
    <name>willkernel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kotlin for Android(六)</title>
    <link href="http://willkernel.github.io/2018/03/24/Kotlin-for-Android-%E5%85%AD/"/>
    <id>http://willkernel.github.io/2018/03/24/Kotlin-for-Android-六/</id>
    <published>2018-03-24T05:45:00.000Z</published>
    <updated>2018-03-24T05:48:07.975Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h4 id=&quot;Kotlin中的null安全&quot;&gt;&lt;a href=&quot;#Kotlin中的null安全&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="Kotlin" scheme="http://willkernel.github.io/tags/Kotlin/"/>
    
      <category term="Android" scheme="http://willkernel.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin for Android (五)</title>
    <link href="http://willkernel.github.io/2018/03/24/Kotlin-for-Android-%E4%BA%94/"/>
    <id>http://willkernel.github.io/2018/03/24/Kotlin-for-Android-五/</id>
    <published>2018-03-23T17:18:00.000Z</published>
    <updated>2018-03-24T05:44:30.006Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h4 id=&quot;创建SQLiteHelper&quot;&gt;&lt;a href=&quot;#创建SQLiteHelper&quot; class=&quot;headerlink&quot; title=&quot;创建SQLiteHelper&quot;&gt;&lt;/a&gt;创建SQLiteHelper&lt;/h4&gt;&lt;p&gt;一般使用SqliteOpenHelper
        
      
    
    </summary>
    
      <category term="Kotlin" scheme="http://willkernel.github.io/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://willkernel.github.io/tags/Kotlin/"/>
    
      <category term="Android" scheme="http://willkernel.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin for Android (四)</title>
    <link href="http://willkernel.github.io/2018/03/23/kotlin-for-Android-%E5%9B%9B/"/>
    <id>http://willkernel.github.io/2018/03/23/kotlin-for-Android-四/</id>
    <published>2018-03-23T12:08:00.000Z</published>
    <updated>2018-03-23T17:18:10.630Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h4 id=&quot;Application单例化和属性的Delegated&quot;&gt;&lt;a href=&quot;#Application单例化和属性的Delegated&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="Kotlin" scheme="http://willkernel.github.io/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://willkernel.github.io/tags/Kotlin/"/>
    
      <category term="Android" scheme="http://willkernel.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin for Android (三)</title>
    <link href="http://willkernel.github.io/2018/03/23/Kotlin-for-Android-%E4%B8%89/"/>
    <id>http://willkernel.github.io/2018/03/23/Kotlin-for-Android-三/</id>
    <published>2018-03-23T08:34:27.000Z</published>
    <updated>2018-03-23T12:06:54.135Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h4 id=&quot;操作符&quot;&gt;&lt;a href=&quot;#操作符&quot; class=&quot;headerlink&quot; title=&quot;操作符&quot;&gt;&lt;/a&gt;操作符&lt;/h4&gt;&lt;img
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kotlin for Android (二)</title>
    <link href="http://willkernel.github.io/2018/03/23/Kotlin-for-Android-%E4%BA%8C/"/>
    <id>http://willkernel.github.io/2018/03/23/Kotlin-for-Android-二/</id>
    <published>2018-03-23T02:47:00.000Z</published>
    <updated>2018-03-23T08:33:33.257Z</updated>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Anko&quot;&gt;&lt;a href=&quot;#Anko&quot; class=&quot;headerlink&quot; title=&quot;Anko&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Kotlin/anko&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Anko&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Anko Commons：一个轻量级的库，里面包含了intents，对话框，日志等帮助类&lt;/li&gt;
&lt;li&gt;Anko Layouts：用于编写动态Android布局的快速且类型安全的方法&lt;/li&gt;
&lt;li&gt;Anko SQLite：查询适用于Android SQLite的DSL和分析器集合&lt;/li&gt;
&lt;li&gt;Anko Coroutines：基于kotlinx.coroutines库的实用程序&lt;/li&gt;
&lt;li&gt;简化获取RecyclerView&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;val forecastList: RecyclerView = find(R.id.recyclerView)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;扩展函数&quot;&gt;&lt;a href=&quot;#扩展函数&quot; class=&quot;headerlink&quot; title=&quot;扩展函数&quot;&gt;&lt;/a&gt;扩展函数&lt;/h4&gt;&lt;p&gt;扩展函数数是指在一个类上增加一种新的行为，甚至我们没有这个类代码的访问权&lt;br&gt;限。这是一个在缺少有用函数的类上扩展的方法。在Java中，通常会实现很多带有&lt;br&gt;static方法的工具类。Kotlin中扩展函数的一个优势是我们不需要在调用方法的时候&lt;br&gt;把整个对象当作参数传入。扩展函数表现得就像是属于这个类的一样，而且我们可&lt;br&gt;以使用 this 关键字和调用所有public方法&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fun Context.toastF(message: CharSequence,duration: Int=Toast.LENGTH_SHORT)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Toast.makeText(this, &amp;quot;$message&amp;quot;, duration).show()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Anko已经扩展toast函数，提供了CharSequence,(resource id)Int的函数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;toast(R.string.app_name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;longToast(&amp;quot;longToast&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;扩展函数并不是真正地修改了原来的类，它是以静态导入的方式来实现的。扩展函数可以被声明在任何文件中，通用的实践是把一系列有关的函数放在一个新建的文件里&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var TextView.text: CharSequence&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   get() = getText()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   set(v) = setText(v)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://willkernel.github.io/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://willkernel.github.io/tags/Kotlin/"/>
    
      <category term="Android" scheme="http://willkernel.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin for Android (一)</title>
    <link href="http://willkernel.github.io/2018/03/22/Kotlin-for-Android-%E4%B8%80/"/>
    <id>http://willkernel.github.io/2018/03/22/Kotlin-for-Android-一/</id>
    <published>2018-03-22T15:43:00.000Z</published>
    <updated>2018-03-23T02:49:12.143Z</updated>
    
    <summary type="html">
    
      &lt;h4 id=&quot;介绍Kotlin&quot;&gt;&lt;a href=&quot;#介绍Kotlin&quot; class=&quot;headerlink&quot; title=&quot;介绍Kotlin&quot;&gt;&lt;/a&gt;介绍Kotlin&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;编写代码量少&lt;/li&gt;
&lt;li&gt;更加安全：Kotlin编译时期就处理了各种null的情况，避免了执行时异常。如果一个对象可以是null，则我们需要明确地指定它，然后在使用它之前检查它是否是null&lt;/li&gt;
&lt;li&gt;它是函数式的：Kotlin是基于面向对象的语言，它使用了很多函数式编程的概念，比如，使用lambda表达式来更方便地解决问题。其中一个很棒的特性就是Collections的处理方式&lt;/li&gt;
&lt;li&gt;它可以扩展函数：可以扩展类的更多的特性，甚至我们没有权限去访问这个类中的代码&lt;/li&gt;
&lt;li&gt;它是高度互操作性的：你可以继续使用所有的你用Java写的代码和库，因为两个语言之间的互操作性是完美的。可以在一个项目中使用Kotlin和Java两种语言混合编程&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h4&gt;&lt;h5 id=&quot;Expresiveness-可读性&quot;&gt;&lt;a href=&quot;#Expresiveness-可读性&quot; class=&quot;headerlink&quot; title=&quot;Expresiveness 可读性&quot;&gt;&lt;/a&gt;Expresiveness 可读性&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;POJO&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Artist &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private long id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private String url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private String mbid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public long getId() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void setId(long id) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this.id = id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;···&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kotlin中创建数据类Artist.kt,自动生成所有属性和访问器&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;data class Artist(var id: Long, var name: String, var url: String, var mbid: String)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;空安全&quot;&gt;&lt;a href=&quot;#空安全&quot; class=&quot;headerlink&quot; title=&quot;空安全&quot;&gt;&lt;/a&gt;空安全&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; //编译不通过，非空类不能为null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; var artist:Artist=null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; //安全调用操作符? 明确地指定一个对象是否能为空&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; var artist: Artist? = null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 无法编译, artist可能是null，需要进行处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// artist.hashCode()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//在artist!=null时调用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;artist?.hashCode()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 判空&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if(artist!=null)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  artist.hashCode()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//给定在null时的替代者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;val name=artist?.name?:&amp;quot;empty&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//确保artist不是null的情况下调用，否在抛异常KotlinNullPointerException&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;artist!!.hashCode()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://willkernel.github.io/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://willkernel.github.io/tags/Kotlin/"/>
    
      <category term="Android" scheme="http://willkernel.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>RxJava2</title>
    <link href="http://willkernel.github.io/2018/03/20/RxJava2/"/>
    <id>http://willkernel.github.io/2018/03/20/RxJava2/</id>
    <published>2018-03-20T07:14:00.000Z</published>
    <updated>2018-03-21T18:07:17.577Z</updated>
    
    <summary type="html">
    
      &lt;h5 id=&quot;RxJava2&quot;&gt;&lt;a href=&quot;#RxJava2&quot; class=&quot;headerlink&quot; title=&quot;RxJava2&quot;&gt;&lt;/a&gt;RxJava2&lt;/h5&gt;&lt;p&gt;RxJava是Java VM响应式编程扩展的实现，扩展了观察者模式，通过操作符对数据事件流操作，来编写异步和基于事件的程序，从而不用关心同步，线程安全并发等问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;app/build.gradle&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;implementation &amp;apos;io.reactivex.rxjava2:rxjava:2.1.9&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;implementation &amp;apos;io.reactivex.rxjava2:rxandroid:2.0.2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//retrofit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;implementation &amp;apos;com.squareup.retrofit2:retrofit:2.3.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//Gson converter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;implementation &amp;apos;com.squareup.retrofit2:converter-gson:2.3.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//RxJava2 Adapter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;implementation &amp;apos;com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//okhttp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;implementation &amp;apos;com.squareup.okhttp3:okhttp:3.8.1&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;implementation &amp;apos;com.squareup.okhttp3:logging-interceptor:3.6.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://willkernel.github.io/categories/Android/"/>
    
    
      <category term="RxJava2" scheme="http://willkernel.github.io/tags/RxJava2/"/>
    
  </entry>
  
  <entry>
    <title>Data Binding</title>
    <link href="http://willkernel.github.io/2018/03/16/Data-Binding/"/>
    <id>http://willkernel.github.io/2018/03/16/Data-Binding/</id>
    <published>2018-03-16T05:38:00.000Z</published>
    <updated>2018-03-21T18:10:19.922Z</updated>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Data-Binding-Library&quot;&gt;&lt;a href=&quot;#Data-Binding-Library&quot; class=&quot;headerlink&quot; title=&quot;Data Binding Library&quot;&gt;&lt;/a&gt;Data Binding Library&lt;/h5&gt;&lt;p&gt;数据绑定库编写声明式布局，尽量减少绑定应用程序逻辑和布局所需的代码，减少布局绑定相关代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;build environment&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     dataBinding &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        enabled = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data Binding Compiler V2&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android.databinding.enableV2=true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;向后不兼容&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://willkernel.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Dagger</title>
    <link href="http://willkernel.github.io/2018/03/13/Dagger/"/>
    <id>http://willkernel.github.io/2018/03/13/Dagger/</id>
    <published>2018-03-12T16:12:00.000Z</published>
    <updated>2018-03-21T18:11:03.531Z</updated>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Dagger&quot;&gt;&lt;a href=&quot;#Dagger&quot; class=&quot;headerlink&quot; title=&quot;Dagger&quot;&gt;&lt;/a&gt;Dagger&lt;/h5&gt;&lt;p&gt;依赖注入（Dependency Injection），简称DI，又叫控制反转（Inversion of Control），简称IOC&lt;br&gt;当一个类的实例需要另一个类的实例，在传统的设计中，通常由调用者来创建被调用者的实例，然而依赖注入的方式，创建被调用者不再由调用者创建实例，创建被调用者的实例的工作由IOC容器来完成，然后注入到调用者。因此也被称为依赖注入&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public @interface Component &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Class&amp;lt;?&amp;gt;[] modules() default &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Class&amp;lt;?&amp;gt;[] dependencies() default &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Target(TYPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @interface Builder &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public @interface Subcomponent &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Class&amp;lt;?&amp;gt;[] modules() default &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Target(TYPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @interface Builder &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public @interface Module &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Class&amp;lt;?&amp;gt;[] includes() default &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Beta&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Class&amp;lt;?&amp;gt;[] subcomponents() default &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public @interface Provides &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public @interface MapKey &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    boolean unwrapValue() default true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public interface Lazy&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    T get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://willkernel.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>ConstraintLayout</title>
    <link href="http://willkernel.github.io/2018/03/10/ConstraintLayout/"/>
    <id>http://willkernel.github.io/2018/03/10/ConstraintLayout/</id>
    <published>2018-03-09T18:16:00.000Z</published>
    <updated>2018-03-20T07:12:15.997Z</updated>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;引入constraint-layout&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;allprojects &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        maven &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            url &amp;apos;https://maven.google.com&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compile &amp;apos;com.android.support.constraint:constraint-layout:1.1.0-beta5&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;属性&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;layout_constraintLeft_toLeftOf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;左对齐&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;layout_constraintLeft_toRightOf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;左边和约束控件的右边对齐&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;layout_constraintRight_toLeftOf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;右边在某组件的左边&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;layout_constraintRight_toRightOf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;右边在某组件的右边&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;layout_constraintTop_toTopOf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;上边和某组件的上边对其&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;layout_constraintTop_toBottomOf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;上边在某组件的下边&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;layout_constraintBottom_toTopOf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;下边在某组件的上边&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;layout_constraintBottom_toBottomOf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;下边在某组件的下边&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;layout_constraintBaseline_toBaselineOf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;组件的基线位置和某组件的基线位置对其（很少用）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;layout_constraintStart_toEndOf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;layout_constraintStart_toStartOf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;layout_constraintEnd_toStartOf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;layout_constraintEnd_toEndOf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;属性的值有两种，一种是同层级组件ID，还有就是parent，当值为parent时即是相对于父布局进行定位&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://willkernel.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>CoordinatorLayout</title>
    <link href="http://willkernel.github.io/2018/03/09/CoordinatorLayout/"/>
    <id>http://willkernel.github.io/2018/03/09/CoordinatorLayout/</id>
    <published>2018-03-09T02:33:00.000Z</published>
    <updated>2018-03-21T18:13:30.692Z</updated>
    
    <summary type="html">
    
      &lt;h4 id=&quot;CoordinatorLayout&quot;&gt;&lt;a href=&quot;#CoordinatorLayout&quot; class=&quot;headerlink&quot; title=&quot;CoordinatorLayout&quot;&gt;&lt;/a&gt;CoordinatorLayout&lt;/h4&gt;&lt;p&gt;Material风格布局，包含在support Library中，结合AppbarLayout,CollapsingToolbarLayout等可达到MD设计风格布局&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;build.gradle&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def SUPPORT = &amp;quot;26.1.0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  implementation &amp;apos;com.android.support:appcompat-v7:26.1.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    implementation &amp;apos;com.android.support.constraint:constraint-layout:1.0.2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    implementation &amp;quot;com.android.support:design:$SUPPORT&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    implementation &amp;quot;com.android.support:cardview-v7:$SUPPORT&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    implementation &amp;quot;com.android.support:recyclerview-v7:$SUPPORT&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    implementation &amp;apos;de.hdodenhof:circleimageview:1.3.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://willkernel.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>NDK</title>
    <link href="http://willkernel.github.io/2018/03/09/NDK/"/>
    <id>http://willkernel.github.io/2018/03/09/NDK/</id>
    <published>2018-03-08T17:04:00.000Z</published>
    <updated>2018-03-20T07:12:42.178Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Android" scheme="http://willkernel.github.io/categories/Android/"/>
    
    
      <category term="NDK" scheme="http://willkernel.github.io/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://willkernel.github.io/2018/03/09/Git/"/>
    <id>http://willkernel.github.io/2018/03/09/Git/</id>
    <published>2018-03-08T17:04:00.000Z</published>
    <updated>2018-03-22T09:08:53.194Z</updated>
    
    <summary type="html">
    
      &lt;h4 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;.git 的隐藏目录是你的本地仓库（Local Repository）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt; 查看历史 &lt;img src=&quot;http://p4n1d4izv.bkt.clouddn.com/images/gitlog.png&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log -p&lt;/code&gt;查看详细历史&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --stat&lt;/code&gt; 查看简要统计&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git show e66666/branch&lt;/code&gt;查看指定commit，加文件名看指定文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git diff --staged/--cached&lt;/code&gt;查看当前工作目录与暂存区的不同，可以看到即将添加到暂存区的改动内容，&lt;code&gt;git diff HEAD&lt;/code&gt;看到当前工作目录与上一个commit的不同&lt;ul&gt;
&lt;li&gt;commit 的 SHA-1 校验和&lt;br&gt;&lt;code&gt;commit 8cf88cf35ce40cb91488e7d9b12cf46463fedc2f&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt;&lt;img src=&quot;http://p4n1d4izv.bkt.clouddn.com/images/gitstatus.png&quot;&gt;
    
    </summary>
    
      <category term="Git" scheme="http://willkernel.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://willkernel.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>MVP(loader/dagger/rxjava2)</title>
    <link href="http://willkernel.github.io/2018/03/09/MVP/"/>
    <id>http://willkernel.github.io/2018/03/09/MVP/</id>
    <published>2018-03-08T17:03:12.000Z</published>
    <updated>2018-03-21T18:14:18.003Z</updated>
    
    <summary type="html">
    
      &lt;h5 id=&quot;MVP概念&quot;&gt;&lt;a href=&quot;#MVP概念&quot; class=&quot;headerlink&quot; title=&quot;MVP概念&quot;&gt;&lt;/a&gt;MVP概念&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;View&lt;br&gt;视图层,包含各种界面相关功能，例如Activity，Fragment，View,Adapter,专注于交互，一般持有Presenter的引用，或者通过依赖注入(Dagger)方式获得Presenter实例，将非UI逻辑操作委托给Presenter&lt;/li&gt;
&lt;li&gt;Presenter&lt;br&gt;逻辑控制层，充当中间人，隔离View层，Model层，接收View层的数据请求，分发给Model层处理，监听Model处理结果，将结果反馈给View，实项界面的刷新&lt;/li&gt;
&lt;li&gt;Model&lt;br&gt;封装网络数据请求，本地数据请求，对Presenter提供简单易用的接口&lt;/li&gt;
&lt;li&gt;MVP，MVC区别&lt;ul&gt;
&lt;li&gt;MVP中Presenter和View，Model通过接口进行通信，通常Presenter与View是一一对应，复杂的可能有多个Presenter&lt;/li&gt;
&lt;li&gt;MVC中Model,View直接通信的，Controller基于行为，可以被多个View共享
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kotlin 入门</title>
    <link href="http://willkernel.github.io/2018/03/09/Kotlin%E5%85%A5%E9%97%A8/"/>
    <id>http://willkernel.github.io/2018/03/09/Kotlin入门/</id>
    <published>2018-03-08T17:03:00.000Z</published>
    <updated>2018-03-23T02:50:36.286Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;ul&gt;
&lt;li&gt;&lt;p&gt;导入布局中所有控件属性&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
        
      
    
    </summary>
    
      <category term="Kotlin" scheme="http://willkernel.github.io/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://willkernel.github.io/tags/Kotlin/"/>
    
      <category term="Android" scheme="http://willkernel.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>MVVM</title>
    <link href="http://willkernel.github.io/2018/03/09/MVVM/"/>
    <id>http://willkernel.github.io/2018/03/09/MVVM/</id>
    <published>2018-03-08T17:02:00.000Z</published>
    <updated>2018-03-21T18:14:36.744Z</updated>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Todo-mvvm-databinding&quot;&gt;&lt;a href=&quot;#Todo-mvvm-databinding&quot; class=&quot;headerlink&quot; title=&quot;Todo-mvvm-databinding&quot;&gt;&lt;/a&gt;Todo-mvvm-databinding&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;Model: 内存，本地，网络数据的实现与获取&lt;/li&gt;
&lt;li&gt;View: 对应Activity,Fragment,负责View的绘制，与用户交互，在xml中编写databinding对model层数据的引用绑定，&lt;code&gt;ViewModelHolder&amp;lt;VH&amp;gt;&lt;/code&gt;作为非UI的Fragment持有ViewModel，并绑定到Activity的生命周期&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ViewModel: databinding框架绑定ViewModel，ViewModel持有View中引用的变量observable fields，以及数据管理类TasksRepository，数据或属性发生变化时，databinding自动更新UI&lt;/p&gt;
&lt;img src=&quot;http://p4n1d4izv.bkt.clouddn.com/images/mvvm-databinding.png&quot;&gt;
    
    </summary>
    
      <category term="Android" scheme="http://willkernel.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android Notes(Performance)</title>
    <link href="http://willkernel.github.io/2018/03/08/Android-Notes-Performance/"/>
    <id>http://willkernel.github.io/2018/03/08/Android-Notes-Performance/</id>
    <published>2018-03-08T08:26:00.000Z</published>
    <updated>2018-03-21T18:14:46.099Z</updated>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Performance-optimization&quot;&gt;&lt;a href=&quot;#Performance-optimization&quot; class=&quot;headerlink&quot; title=&quot;Performance optimization&quot;&gt;&lt;/a&gt;Performance optimization&lt;/h4&gt;&lt;h5 id=&quot;布局&quot;&gt;&lt;a href=&quot;#布局&quot; class=&quot;headerlink&quot; title=&quot;布局&quot;&gt;&lt;/a&gt;布局&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;人眼感觉流畅画面的帧数要达到40-60帧每秒&lt;/li&gt;
&lt;li&gt;在Android中，系统通过VSYNC信号触发对UI的渲染，重绘，需要16ms,其实就是1000ms中显示60帧，1000/60=16.67.如果不能在16ms完成绘制，就会丢帧，例如绘制耗时20ms，在16ms有VSYNC信号时无法绘制，该帧被丢弃，等待下次信号才开始绘制，导致16*2ms 都显示同一帧画面&lt;/li&gt;
&lt;li&gt;在开发者选项中有Profile GPU Rendering 选中On Screen as bars,中间的绿色横线代表VSYNC时间16ms柱状线包含3个部分&lt;ul&gt;
&lt;li&gt;蓝色代表测量绘制Display List的时间&lt;/li&gt;
&lt;li&gt;红色代表OpenGL渲染Display List的时间&lt;/li&gt;
&lt;li&gt;黄色代表CPU等待GPU处理的时间&lt;br&gt;Android 6.0&lt;img src=&quot;http://p4n1d4izv.bkt.clouddn.com/images/gpurendering1.png&quot;&gt;
&lt;img src=&quot;http://p4n1d4izv.bkt.clouddn.com/images/gpurendering2.png&quot;&gt;
    
    </summary>
    
      <category term="Android" scheme="http://willkernel.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android Notes(System Info Manager Safety)</title>
    <link href="http://willkernel.github.io/2018/03/08/Android-Notes-System-Info-Manager-Safety/"/>
    <id>http://willkernel.github.io/2018/03/08/Android-Notes-System-Info-Manager-Safety/</id>
    <published>2018-03-07T17:29:00.000Z</published>
    <updated>2018-03-21T18:14:54.896Z</updated>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Android-System-Info&quot;&gt;&lt;a href=&quot;#Android-System-Info&quot; class=&quot;headerlink&quot; title=&quot;Android System Info&quot;&gt;&lt;/a&gt;Android System Info&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;android.os.Build&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Build.BOARD 主板&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.BRAND 系统定制商&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.SUPPORTED_ABIS CPU指令集&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.DEVICE 设备参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.DISPLAY 显示屏参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.FINGERPRINT 唯一编号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.SERIAL 硬件序列号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.ID 修订版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.MANUFACTURER 硬件制造商&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.MODEL 版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.HARDWARE 硬件名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.PRODUCT 手机产品名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.TAGS Build 标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.TYPE Build 类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.VERSION.CODENAME 开发代号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.VERSION.INCREMENTAL 源码控制版本号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.VERSION.RELEASE 版本字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.VERSION.SDK_INT 版本号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// The following properties only make sense for internal engineering builds.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.HOST Host值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.USER User名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build.TIME 编译时间&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://willkernel.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android Notes(Activity)</title>
    <link href="http://willkernel.github.io/2018/03/07/Android-Notes-Activity/"/>
    <id>http://willkernel.github.io/2018/03/07/Android-Notes-Activity/</id>
    <published>2018-03-07T14:53:00.000Z</published>
    <updated>2018-03-21T18:15:06.264Z</updated>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Activity，Activity调用栈&quot;&gt;&lt;a href=&quot;#Activity，Activity调用栈&quot; class=&quot;headerlink&quot; title=&quot;Activity，Activity调用栈&quot;&gt;&lt;/a&gt;Activity，Activity调用栈&lt;/h4&gt;&lt;img src=&quot;http://p4n1d4izv.bkt.clouddn.com/images/activity_lifecycle.png&quot;&gt;
&lt;ul&gt;
&lt;li&gt;onCreate 创建基本元素&lt;/li&gt;
&lt;li&gt;初始化资源，或在onPause中释放的资源&lt;/li&gt;
&lt;li&gt;onPause/onStop 清除Activity资源，camera，sensor，receivers&lt;/li&gt;
&lt;li&gt;onDestory 清除线程&lt;/li&gt;
&lt;li&gt;activity 在onSaveInstanceState()保存状态到Bundle，在onRestoreInstanceState(),onCreate()恢复状态Bundle，已经默认实项了控件的状态保存
    
    </summary>
    
      <category term="Android" scheme="http://willkernel.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android Notes(SurfaceView)</title>
    <link href="http://willkernel.github.io/2018/03/07/Android-Notes-SurfaceView/"/>
    <id>http://willkernel.github.io/2018/03/07/Android-Notes-SurfaceView/</id>
    <published>2018-03-07T05:30:00.000Z</published>
    <updated>2018-03-21T18:15:23.751Z</updated>
    
    <summary type="html">
    
      &lt;h4 id=&quot;SurfaceView&quot;&gt;&lt;a href=&quot;#SurfaceView&quot; class=&quot;headerlink&quot; title=&quot;SurfaceView&quot;&gt;&lt;/a&gt;SurfaceView&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;View适用于主动刷新，SurfaceView适用于被动刷新，例如频繁刷新&lt;/li&gt;
&lt;li&gt;View在主线程中对画面进行刷新，SurfaceView通常会在子线程进行页面刷新&lt;/li&gt;
&lt;li&gt;View绘制时没有使用双缓冲机制，SurfaceView在底层机制中实项了双缓冲机制
    
    </summary>
    
      <category term="Android" scheme="http://willkernel.github.io/categories/Android/"/>
    
    
  </entry>
  
</feed>
